#+TITLE: Scheme
#+AUTHOR: fran
#+DESCRIPTION: Pasando a limpio lo que aprendi de distintas fuentes sobre SCHEME
#+BIBLIOGRAPHY: Hal Abelson, Gerald Jay Sussman - Structure and Interpretation of Computer Programs.

* TABLA DE CONTENIDOS :toc:
- [[#construyendo-abstracciones-con-procedimientos][Construyendo Abstracciones con Procedimientos]]
  - [[#elementos-de-la-programacion][Elementos de la programacion]]
  - [[#procedimientos-y-los-procesos-que-generan][Procedimientos y los procesos que generan]]
  - [[#formulando-abstraciones-con-procedimientos-de-orden-superior][Formulando Abstraciones con Procedimientos de Orden Superior]]
- [[#construyendo-abstracciones-con-datos][Construyendo Abstracciones con Datos]]
  - [[#abstracciones-de-datos][Abstracciones de Datos]]
  - [[#que-se-entiende-por-datos][¿Que se entiende por datos?]]

* Construyendo Abstracciones con Procedimientos
** Elementos de la programacion
Todo lenguaje de programacion debe proveer medios para la construccion de ideas complejas a partir de ideas simples, por ello todo lenguaje cuenta con tres mecanismos para lograrlo:

*Expresiones Primitivas:* las entidades mas simples que maneja el lenguaje, int, float, etc.

*Metodos de Combinacion:* elementos complejos son construidos a partir de elementos mas simples.

*Metodos de Abstraccion:* elementos complejos pueden ser nombrados y tratados como unidades.

*** Expresiones
Scheme (como todo dialecto lisp), utiliza notacion polaca, expresiones primitivas como suma, numeros, etc. se pueden combinar para formar *combinaciones*, estas estan formadas por una *lista de expresiones*, el elemento mas a la izquierda es el *operador*, el resto de elementos son sus *operandos*, cada operando puede ser a su vez otra combinacion permitiendo a las combinaciones estar *anidadas*, en principio no hay limite de la profundidad del anidamiento:

#+begin_src scheme
                                          ; Expresiones primitivas
  1
  5
                                          ; Expresiones combinadas
  (+ 5 1)
  (* 5 4 3 2)
                                          ; Expresiones anidadas
  (+ (* 3
        (+ 100 50))
     (* 1 1)
     (* 1 1))
#+end_src

Para la definicion de *variables*, la funcion /define/ nos permite nombrar algo en el *entorno global*, se puede definir en distintos entornos.
*** TODO Agregar otras definiciones de variables en diferentes entornos
#+begin_src scheme
  (define variable "Hola mundo")
  variable
#+end_src

#+RESULTS:
: Hola mundo

Notar que (define x y) no es una combinacion, ya que no aplica el operador a sus operandos, sino que los asocia, dichas excepciones son llamadas *formas especiales*. Cada forma especial tiene su propia regla de evaluacion.

*** Procedimientos Compuestos
Para definir procedimientos en Scheme, de nuevo utilizamos /define/. Ej potencia 2:

#+begin_src scheme
  (define (cuadrado x) (* x x))
  (cuadrado 4)
#+end_src

#+RESULTS:
: 16

La forma general para definir un procedimiento es:
#+begin_src scheme
  (define (<nombre> <parametros formales>)
    (<cuerpo>))
#+end_src

El /nombre/ es un simbolo asociado a la definicion del procedimiento en el entorno. Los /parametros formales/ son los nombres utilizados dentro del cuerpo del procedimiento. El /cuerpo/ es una expresion que producira un resultado en el momento que los parametros formales se reemplacen por los reales. El nombre y los parametros formales son agrupados entre parentesis justo como seria la llamada real al procedimiento.

Ej x^2 + y^2:

#+begin_src scheme
  (define (cuadrado x) (* x x))
  (define (suma-de-cuadrados x y)
    (+ (cuadrado x) (cuadrado y)))

  (suma-de-cuadrados 3 4)
#+end_src

#+RESULTS:
: 25

*Orden Aplicativo vs Orden Normal*

Como habiamos dicho Scheme evalua primero el operador y los operandos, luego aplica el procedimiento resultante a los argumentos resultantes. Podemos pedirle a Scheme un metodo alternativo, que no evalue los argumentos hasta que sea necesario.

El *orden normal*, primero expande toda la combinacion hasta que solo quedan primitivas, luego realiza la evaluacion.

/Primero expande luego reduce./

Ej:

#+begin_src scheme
                                          ; Expande
  (suma-de-cuadrados 3 4)
  (+ (cuadrado 3) (cuadrado 4))
  (+ (* 3 3) (* 4 4))
                                          ; Reduce
  (+ (9) (16))
  (25)
#+end_src

Mientras que el *orden aplicativo* va evaluando las expresiones primitivas mas anidadas primero y luego evaluando los resultados con el siguiente operador.

Ej:

#+begin_src scheme 
  (suma-de-cuadrados 3 4)
  (+ (cuadrado 3) (cuadrado 4))
  (+ (* 3 3) (cuadrado 4))
  (+ 9 (cuadrado 4))
                                          ; .....

  (25)
#+end_src

Scheme utiliza el modo aplicativo por defecto principalmente por la eficiencia adicional obtenida al eludir multiples evaluaciones de expresiones del tipo (+ x y) (* x y) y mas importante, la evaluacion en orden normal se vuelve mas compleja de tratar cuando dejamos el reino de los procedimientos que pueden ser modelados con substituciones.

*** Expresiones Condicionales y Predicados

Los *condicionales* en scheme se utilizan de la siguiente manera:

#+begin_src scheme 
  (cond (<p1> <e1>) (<p2> <e2>) ... )
#+end_src

Donde pi es el *predicado* y ei la *expresion* resultante si pi es verdadero, el par /(<pi> <ei>)/ es llamado *clausula*. Veamos un ejemplo con el valor absoluto:

#+begin_src scheme 
  (define (abs x)
    (cond ((> x 0) 0)
          ((= x 0) 0)
          ((< x 0) (- x))))

  (abs (- 20))
#+end_src

#+RESULTS:
: 20

Scheme evalua cada uno de los predicados en orden, retorna la expresion del primer predicado en evaluar verdadero, si no hay, la condicion es /indefinida/. Se puede utilizar *else* en la clausula final de una condicion, esto causa que else retorne la expresion asociada cuando ningun otro predicado fue verdadero.

#+begin_src scheme 
  (define (abs x)
    (cond ((< x 0) (- x))
          (else x)))

  (abs (- 20))
#+end_src

#+RESULTS:
: 20

Tambien podemos usar *if*, la forma general de una expresion if es:

#+begin_src scheme 
  (if <predicado> <expresion_v> <expresion_f>)
#+end_src

Scheme cuenta con operaciones logicas que permiten construir predicados compuestos:

#+begin_src scheme 
  (and ⟨e1⟩ . . . ⟨en⟩)
  (or ⟨e1⟩ . . . ⟨en⟩)
  (not ⟨e⟩)
#+end_src

Notar que tanto /or/ como /and/ son formas especiales, no procedimientos, ya que las subexpresiones no necesariamente son todas evaluadas.

#+begin_src scheme 
  (define (>= x y)
    (or (> x y) (= x y)))

  (define (<= x y)
    (not (> x y)))

  (<= 2 2)
#+end_src

#+RESULTS:
: #t

En matematicas generalmente nos enfocamos a *descripciones declarativas* /que es/, mientras que en computacion nos interesan las *descripciones imperativas* /como hacer/.

Ej: /raiz(x) = y/, donde /y >= 0/ y /x = y*y/

No nos dice como obtener el numero /y/ que cumple dicha condicion, podemos aproximar un resultado con el metodo de newton:

/xn+1 = xn - f(xn)/f'(xn)/,

#+begin_src scheme
  (define (cuadrado x) (* x x))
  (define (abs x)
    (cond ((< x 0) (- x))
          (else x)))

  (define (raiz-newton aprox x)
    (if (buena-aprox? aprox x)
        aprox
        (raiz-newton (mejorar-aprox aprox x) x)))

  (define (mejorar-aprox aprox x)
    (promedio aprox (/ x aprox)))

  (define (promedio x y)
    (/ (+ x y) 2))

  (define (buena-aprox? aprox x)
    (< (abs (- (cuadrado aprox) x))
       0.0001))

  (raiz-newton 4 17)
#+end_src

#+RESULTS:
: 2177/528

*** Procedimientos: abstracciones caja negra

*Nombres Locales*
Al definir procedimientos, los nombres que utilizamos en los parametros formales son llamados *variables vinculadas*, dichas variables son locales al cuerpo de la definicion del procedimiento, por ejemplo en raiz-newton nuestras variables vinculadas serian /aprox, y, x/.
Sin embargo /if, buena-aprox?/, etc. no son locales a dicha definicion, son llamadas *libres*, que pasa si tenemos un sistema grande y contamos con varios procedimientos /buena-aprox/ diferentes?.

*Definiciones internas y estructura de bloques*
Para solucionar el problema nombrado contamos con *subprocedimientos*, definiendolos internamente en un bloque:

#+begin_src scheme
  (define (cuadrado x) (* x x))
  (define (abs x) (cond ((< x 0) (- x)) (else x) ))
  (define (promedio x y) (/ (+ x y) 2))

  (define (raiz-newton aprox x)
    (define (mejorar-aprox aprox)
      (promedio aprox (/ x aprox)))
    (define (buena-aprox? aprox)
      (< (abs (- (cuadrado aprox) x))
         0.0001))
    (if (buena-aprox? aprox)
        aprox
        (raiz-newton (mejorar-aprox aprox) x)))

  (raiz-newton 4 19)

#+end_src

#+RESULTS:
: 11916881/2733920

Ahora /mejorar-aprox/ y /buena-aprox/ son subprocedimientos locales a raiz-newton, si mas adelante tenemos funciones de evaluacion de aproximaciones diferentes no van a interferir en nuestro procedimiento.

** Procedimientos y los procesos que generan

Un procedimiento es un patron para la *evolucion local* de un proceso computacional. Especifica como cada estapa del proceso es construida sobre la anterior. Nos gustaria ser capaces de hacer afirmaciones globales sobre el comportamiento global del proceso, cuya evolucion local ya ha sido especificada por un procedimiento.

*** Recursion Linear e Iteraciones
Cuando realizamos recursion en Scheme, el proceso construye una cadena de *operaciones diferidas*, ya que tiene que expandir de nuevo el procedimiento y mantener la informacion de la operacion del procedimiento anterior
#+begin_src scheme 
  (define (factorial n)
    (if (= n 1)
        1
        (* n (factorial (- n 1)))))

  (factorial 5)
#+end_src

#+RESULTS:
: 120

Este ej ejecutra de la sig manera:

#+begin_src scheme 
  (* 5 ( factorial 4))

  (* 5 (* 4 (factorial 3)))
  ...
  (* 5 (* 4 (* 3 (* 2 (1)))))
#+end_src

Podemos hacerlo de forma iterativa, devolviendo la evaluacion del siguiente paso con los parametros reales, solo manteniendo la informacion de los operandos, sin tener que crear una lista de operaciones diferidas:

#+begin_src scheme 
  (define (factorial producto contador max-cant)
    (if (> contador max-cant)
        producto
        (factorial (* producto contador) (+ contador 1) max-cant)))

  (factorial 1 1 5)
#+end_src

#+RESULTS:
: 120

De forma interactiva la ejecucion es:

#+begin_src scheme 
  (factorial 1 1 5)
  (factorial 1 2 5)
  (factorial 2 3 5)
  (factorial 6 4 5)
  ...
#+end_src

La mayoria de lenguajes estan diseñados de forma que la interpretacion de procedimientos recursivos consumen una cantidad creciente de memoria con cada llamada, incluso cuando el proceso que describe es iterativo. Scheme permite ejecutar un proceso iterativo en un espacio constante incluso si es descrito por un procedimiento recursivo. Dichas implementaciones con esta propiedad se llaman *cola-recursiva*.

*** Arbol Recursivo
Cuando tenemos multiples llamadas recursivas en nuestros procedimientos, la ejecucion del procedimiento tendra una forma de arbol, el cual crece de manera exponencial.
#+begin_src scheme 
  (define (fib n)
    (if (< n 2)
        n
        (+ (fib (- n 1)) (fib (- n 2)))))

  (fib 5)
#+end_src

#+RESULTS:
: 5

[[file:./Imagenes/fib.png]]

Otro ejemplo de arbol recursivo y una variante iterativa

#+begin_src scheme 
    (define (f n)
      (if (< n 3)
          n
          (+ (f (- n 1))
             (* 2 (f (- n 2)))
             (* 3 (f (- n 3))))))

    (f 20)
#+end_src

#+RESULTS:
: 10771211

#+begin_src scheme
          (define (f-iter n)
            (define (f-iter-aux n i a b c)
              (if (< n 3)
                  n
                  (if (< i n)
                      (f-iter-aux n
                                  (+ i 1)
                                  b c
                                  (+ c (* 2 b) (* 3 a)))
                      c)))
            (f-iter-aux n 2 0 1 2))

          (f-iter 20)

#+end_src

#+RESULTS:
: 10771211

** Formulando Abstraciones con Procedimientos de Orden Superior
Los procedimientos que toman otros procedimientos como parametros son llamados *procedimientos de orden superior*, en esta seccion veremos como los procedimientos de orden superior son herramientas de abstraccion muy poderosas.

*** Procedimientos como Argumentos
Algunos procedimientos tienen patrones en comun, por ejemplo si quisieramos sumar los numeros dentro de un rango o sus potencias, en ambos procedimientos realizamos una suma recorriendo un intervalo.

En matematicas dicho patron ya ha sido identificado hace tiempo, es una *suma de series*, creando la notacion sigma: 

∑n=a,b f(n) = f(a) + .. + f(b)

El poder de la notacion sigma es que permite a los matematicos tratar con el concepto de sumatoria en vez de solamente con sumas particulares.

De manera similar como diseñadores, nos gustaria contar con un lenguaje lo suficientemente poderoso que nos permita escribir procedimientos que traten la idea de sumatoria antes de procedimientos que calculan sumas particulares. En Scheme esto se puede hacer facilmente:

#+begin_src scheme 
    (define (sumatoria fun-f a b fun-sig)
      (if (> a b)
          0
          (+ (fun-f a)
             (sumatoria fun-f (fun-sig a) b fun-sig))))

                                            ; Veamos la sumatoria de todos los numeros pares entre 0 100
    (define (incrementar-dos a) (+ a 2))

    (sumatoria + 0 100 incrementar-dos)

                                            ; Ahora la sumatoria de los cubos entre 0 y 100

    (define (incrementar-uno a) (+ a 1))
    (define (cubo a) (* a a a))

    (sumatoria cubo 0 100 incrementar-uno)

                                            ; Aproximemos pi
    (define (pi-fun x) (/ 1.0 (* x (+ x 2))))
    (define (pi-sig x) (+ x 4))

    (* (sumatoria pi-fun 1 1000 pi-sig) 8)

#+end_src

#+RESULTS:
: 3.139592655589783

*** Procedimientos usando /lambda/
En vez de estar definiendo uno a uno procedimientos como /incrementar-x, pi-sig, pi-fun, etc./ podemos describir lo que queremos utilizando la forma especial *lambda*:

#+begin_src scheme
  (define (sumatoria fun-f a b fun-sig)
    (if (> a b)
        0
        (+ (fun-f a) (sumatoria fun-f (fun-sig a) b fun-sig))))

  ;; Veamos la sumatoria de cubos de los numeros pares entre 0 100

  (sumatoria
   (lambda (x) (* x x x))
   0
   100
   (lambda (x) (+ x 2)))

#+end_src

#+RESULTS:
: 13005000

En general lambda es utilizado para crear procedimientos de la misma forma que define, con la excepcion que no se lo asocia a ningun nombre del entorno.

#+begin_src scheme 
  (lambda (<parametros-formales>) (<cuerpo>))
#+end_src

Otro uso de lambda esta en crear variables locales.
#+begin_src scheme 
  (let ((<var1> <exp1>) .. (<varn> <expn>)) (<cuerpo>))
#+end_src

La primer parte de la expresion *let* es una lista de pares /nombre-expresion/. Cuando let es evaluado, cada nombre es asociado con el valor de la expresion correspondiente. El cuerpo de let es evaluado con dichos nombres asociados como variables locales. La expresion let es interpretada como una altrenativa sintactica a:

#+begin_src scheme 
  ((lambda (<var1> .. <varn>) <cuerpo>) <exp1> .. <expn>)
#+end_src

No se requieren de nuevos mecanismo en el interprete para proveer variables locales. Veamos un ejemplo

#+begin_src scheme
  (define x 5)

  (+
   (let ((x 3)) (* x 3)) ; aca x es local al let, por lo que x=3, let evalua 3*3
   x) ;aca el x es el definido arriba, 5, 5 + let = 5+9 = 14
#+end_src

#+RESULTS:
: 14

*** Procedimientos como valores de retorno
Hemos visto como la habilidad de pasar procedimientos como argumentos incrementa enormemente el poder expresivo de nuestro lenguaje. Podemos mejorar esto aun mas creando procedimientos cuyos valores de retorno sean procedimientos. Veamos un ejemplo, sabemos que la derivada de una funcion es:

f'(x) = (f(x+dx) - f(x)/dx)

Podemos definir un procedimiento que nos devuelva la derivada de una funcion.

#+begin_src scheme
  
  (define dx 0.000000001) ; dx -> 0
  (define (derivada fun)
    (lambda (x) (/ (- (fun (+ x dx)) (fun x)) dx)))

                                          ; como derivada retorna procedimiento (generado por lambda), podemos aplicar su resultado a un valor

  (define (cuadrado x) (* x x))

  ((derivada cuadrado) 10) ; derivada de x2 es 2x, 2(10) = 20
#+end_src

#+RESULTS:
: 20.00000165480742

* Construyendo Abstracciones con Datos
** Abstracciones de Datos
Construimos *abstracciones de datos* a partir de datos simples uniendolos en *datos compuestos*. Su objetivo principal es estructurar programas que van a utilizar datos compuestos de forma que operen en "abstracciones de datos".

Esto es, nuestros programas deberian utilizar los datos de manera tal que nos permita no realizar asunciones sobre datos que no sean estrictamente necesarios conocer para realizar la tarea dada. Al mismo tiempo una representacion "concreta" es definida independientemente de los programas que la usen como datos. La interfaz entre ambas partes de nuestro sistema sera un conjunto de procedimientos llamados *selectores* y *constructores*.

Veremos como las abstracciones de datos nos permitiran delimitar barreras abstractas entre las diferentes partes de nuestro programa.

Todo lenguaje cuenta con una una herramienta que sirva de "pegamento" para unir datos simples, veremos como lograr esto en Scheme sin utilizar operaciones de datos, sino mas bien procedimientos, diluyendo aun mas la distincion entre dato y procedimiento.

Supongamos que queremos realizar procedimientos que realicen las operaciones de suma, resta, etc. en numeros racionales representados por dos enteros numerador y denominador, asumamos que existen procedimientos /nuevo-racional num den/ que devuelve una abstraccion de datos de un numero racional y los procedimientos /numerador x/, /denominador x/ que devuelven el numerador y denominador del numero racional.

Podemos expresar las operaciones como:

#+begin_src scheme 
  (define (suma-racional x y)
    (nuevo-racional (+ (* (numerador x) (denominador y))
                 (* (numerador y) (denominador x)))
              (* (denominador x) (denominador y))))
  
  (define (resta-racional x y)
    (nuevo-racional (- (* (numerador x) (denominador y))
                 (* (numerador y) (denominador x)))
              (* (denominador x) (denominador y))))

  (define (producto-racional x y)
    (nuevo-racional (* (numerador x) (numerador y))
              (* (denominador x) (denominador y))))

  (define (division-racional x y)
    (nuevo-racional (* (numerador x) (denominador y))
              (* (denominador x) (numerador y))))

  (define (iguales? x y)
    (= (* (numerador x) (denominador y))
       (* (numerador y) (denominador x))))
#+end_src

Hemos definido operaciones sobre numeros racionales en terminos de procedimientos selectores como /numerador, denominador/ y constructores como /nuevo-racional/.

Para definir estos procedimientos necesitamos abstracciones de datos, para construir dichas abstracciones scheme nos provee del "pegamento" *pares* el cual se define con /cons/, y de los procedimientos primitivos /car/ y /cdr/ que permiten acceder al primer y segundo elemento del par respectivamente:

#+begin_src scheme 
  (define x (cons 1 2))
  (car x)
#+end_src

#+RESULTS:
: 1

Ahora si podemos definir los procedimientos /nuevo-raciona, numerador, denominador/:

#+begin_src scheme

  (define nuevo-racional cons)
  (define numerador car)
  (define denominador cdr)
  (define (suma-racional x y)
    (nuevo-racional (+ (* (numerador x) (denominador y))
                       (* (numerador y) (denominador x)))
                    (* (denominador x) (denominador y))))

  (define (resta-racional x y)
    (nuevo-racional (- (* (numerador x) (denominador y))
                       (* (numerador y) (denominador x)))
                    (* (denominador x) (denominador y))))

  (define (producto-racional x y)
    (nuevo-racional (* (numerador x) (numerador y))
                    (* (denominador x) (denominador y))))

  (define (division-racional x y)
    (nuevo-racional (* (numerador x) (denominador y))
                    (* (denominador x) (numerador y))))

  (define (iguales? x y)
    (= (* (numerador x) (denominador y))
       (* (numerador y) (denominador x))))

  (iguales? (nuevo-racional 1 2) (nuevo-racional 1 2))
#+end_src

#+RESULTS:
: #t

** ¿Que se entiende por datos?

Si prestamos atencion las abstracciones de datos pueden construirse en base a una serie de procedimientos y condiciones que dichos procedimientos deben cumplir. Por ejemplo, para *par* se tiene que cumplir que dados dos objetos x e y, si z es el par de ambos objetos, entonces (car z) devuelve x y (cdr z) devuelve y. Podemos realizar nuestra propia implementacion de pares de la siguiente manera:

#+begin_src scheme 
  (define (par x y)
    (define (get m)
      (cond ((= m 0) x)
            ((= m 1) y)
            (else (error "El argumento debe ser 0 o 1" m))))
    get)
  (define (car z) (z 0))
  (define (cdr z) (z 1))

  (define x (par 5 'holaMundo))
  (x 1)
  (cdr x)
#+end_src

#+RESULTS:
: holaMundo

Los procedimientos de arriba nos permite representar pares sin tener que utilizar datos, prestemos antencion que el valor retornado por /par/ es un procedimiento interno llamado get, el cual devuelve x o y si se le pasa como argumento 0 o 1.

La representacion procedural pese a ser un poco obscura, demuestra que la habilidad de manipular procedimientos como si fuesen objetos automaticamente provee la habilidad de representar datos compuestos. Este estilo de programacion es a menudo llamada *pasaje de mensajes*

#+begin_src scheme 
  ;; Otra representacion de pares

  (define (par x y)
    (lambda (m) (m x y)))

  (define (car z)
    (z (lambda (x y) x)))


  (define (cdr z)
    (z (lambda (x y) y)))

  (define dato (par 'hola 'mundo))
  (cdr dato)
#+end_src

#+RESULTS:
: mundo
